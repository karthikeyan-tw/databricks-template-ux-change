apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: testing-new-ux
  title: Testing New UX
  description: |
    This accelerator provides Terraform modules to provision Databricks workspaces,
    compute, Unity Catalog, metastores, and security configurations with predefined
    configuration templates for quick deployment.
  tags:
    - databricks
    - terraform
    - aws
    - oidc
    - data-modernization
spec:
  owner: group:accelerator-publisher
  type: service
  parameters:
    - title: Basic Configuration
      description: Choose your deployment configuration and provide basic details.
      required: [acknowledge, clientDeploymentName, configurationTemplate]
      properties:
        acknowledge:
          type: array
          title: Please confirm the following setup is done
          minItems: 4
          items:
            type: string
            enum:
              - "AWS Account is created"
              - "AWS OIDC configuration is done, and Role ARN is collected"
              - "Databricks Account is created"
              - "Databricks Service Principal with OAuth2 is created, and Client ID & Secret are collected"
          uniqueItems: true
          ui:widget: checkboxes
        clientDeploymentName:
          type: string
          title: Client Deployment Name
          description: "The unique client deployment name for this accelerator."
        configurationTemplate:
          type: string
          title: Configuration Template
          description: "Choose a deployment configuration to see its details below."
          enum: [default, alternate]
          enumNames: [
            "Default (Thoughtworks Production Setup)",
            "Alternate (Analytics Variant)"
          ]
          default: default
        deploymentOwner:
          title: Deployment Owner
          type: string
          description: Owner of the deployment
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group

      allOf:
        - if:
            properties:
              configurationTemplate:
                const: default
          then:
            properties:
              defaultDescription:
                type: string
                title: "ðŸ“‹ Default Configuration Details"
                ui:widget: textarea
                ui:disabled: true
                default: |
                  â€¢ Workspace: thoughtworks-main with development & demo catalogs
                  â€¢ Compute: Shared Cluster (m4.large) with 60min auto-terminate
                  â€¢ SQL Warehouse: Small serverless warehouse (2-3 clusters)
                  â€¢ Storage: S3 with thoughtworks prefix, DBFS encryption
                  â€¢ Catalogs: Development & Demo with bronze/silver/gold schemas
                  â€¢ Jobs: UCX assessment job and DLT pipelines are pre-configured
                  â€¢ Security: Designed for HIPAA & PCI-DSS compliance standards
                  â€¢ Best for: Production workloads with a complete feature set.

        - if:
            properties:
              configurationTemplate:
                const: alternate
          then:
            properties:
              alternateDescription:
                type: string
                title: "ðŸ”¬ Alternate Configuration Details"
                ui:widget: textarea
                ui:disabled: true
                default: |
                  â€¢ Workspace: alternate-workspace with an analytics focus
                  â€¢ Compute: Analytics Cluster (r5.large) with Photon enabled
                  â€¢ SQL Warehouse: Medium, scalable warehouse (1-4 clusters)
                  â€¢ Cost Optimization: Uses Spot instances with a 70% bid price
                  â€¢ Monitoring: CloudWatch is enabled for better observability
                  â€¢ ACLs: Streamlined permissions tailored for analytics workflows
                  â€¢ Best for: Analytics workloads where cost and performance are key.

    - title: CI/CD and Environment Configuration
      description: Provide your CI/CD and environment details.
      required:
        - repoUrl
        - tfStateBucket
        - awsRegion
        - awsOidcRoleArn
        - databricksAccountId
        - databricksClientId
        - databricksClientSecret
        - databricksHost
        - appS3BucketName
      properties:
        repoUrl:
          title: Target Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            requestUserCredentials:
              secretsKey: USER_OAUTH_TOKEN
              additionalScopes:
                github:
                  - workflow
            allowedHosts:
              - github.com
        tfStateBucket:
          title: Terraform State S3 Bucket Name
          type: string
          description: "Name of the S3 bucket to store Terraform state files."
        awsRegion:
          title: AWS Region
          type: string
          description: "AWS region for deploying resources and for the S3 state bucket (e.g., us-west-1)."
          default: us-west-1
        awsOidcRoleArn:
          title: AWS OIDC Role ARN
          type: string
          description: "ARN of the IAM Role for GitHub Actions OIDC authentication (e.g., arn:aws:iam::123456789012:role/GitHubActionsRole)."
        databricksAccountId:
          title: Databricks Account Id
          type: string
          description: "Account ID of the Databricks"
        databricksClientId:
          title: Databricks Client ID
          type: string
          description: "Client ID for the Databricks Service Principal."
        databricksClientSecret:
          title: Databricks Client Secret
          type: string
          description: "Client Secret for the Databricks Service Principal."
          ui:field: Secret
        databricksHost:
          title: Databricks Host
          type: string
          description: "Databricks workspace URL (e.g., https://accounts.cloud.databricks.com)"
          default: "https://accounts.cloud.databricks.com"
        appS3BucketName:
          title: Application S3 Bucket Name
          type: string
          description: "S3 bucket name for application data storage."

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:plain
      input:
        url: ../skeleton

    - id: copy-selected-config
      name: Copy Selected Configuration
      action: fetch:plain
      input:
        url: ../backstage/configurations/${{ parameters.configurationTemplate }}.yaml
        targetPath: ./config/default.yml

    - id: template-minimal-files
      name: Template Minimal Files
      action: fetch:template
      input:
        url: ../backstage/scaffolder
        templateFileExtension: '.njk'
        targetPath: ./
        values:
          clientDeploymentName: ${{ parameters.clientDeploymentName }}
          githubProjectSlug: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          databricksAccountId: ${{ parameters.databricksAccountId }}
          deploymentOwner: ${{ parameters.deploymentOwner }}
          awsRegion: ${{ parameters.awsRegion }}
          configurationTemplate: ${{ parameters.configurationTemplate }}

    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        allowedHosts: [ 'github.com' ]
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: private
        defaultBranch: main
        token: ${{ secrets.USER_OAUTH_TOKEN or false }}
        description: Databricks Terraform Accelerator - ${{ parameters.configurationTemplate }} configuration
        secrets:
          DATABRICKS_CLIENT_SECRET: ${{ parameters.databricksClientSecret }}
        repoVariables:
          DATABRICKS_HOST: ${{ parameters.databricksHost }}
          DATABRICKS_CLIENT_ID: ${{ parameters.databricksClientId }}
          AWS_REGION: ${{ parameters.awsRegion }}
          AWS_ROLE_TO_ASSUME: ${{ parameters.awsOidcRoleArn }}
          TF_BACKEND_BUCKET: ${{ parameters.tfStateBucket }}
          TF_VAR_s3_bucket_name_main: ${{ parameters.appS3BucketName }}
          TF_STATE_KEY: "databricks/github/${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}/terraform.tfstate"
          CONFIGURATION_TEMPLATE: ${{ parameters.configurationTemplate }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/backstage/catalog-info.yaml'

  output:
    links:
      - title: GitHub Repository
        icon: github
        url: ${{ steps.publish.output.remoteUrl }}
      - title: View in Backstage Catalog
        icon: catalog
        url: https://app-202129374367.us-central1.run.app/catalog/default/component/${{ parameters.clientDeploymentName }}-aws-databricks-provisioner

  dependencies:
    configurationTemplate:
      oneOf:
        - properties:
            configurationTemplate:
              const: default
          required:
            - defaultDescription
        - properties:
            configurationTemplate:
              const: alternate
          required:
            - alternateDescription